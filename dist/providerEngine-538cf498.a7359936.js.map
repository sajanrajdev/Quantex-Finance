{"version":3,"sources":["../node_modules/web3-provider-engine/util/stoplight.js","../node_modules/web3-provider-engine/util/rpc-cache-utils.js","../node_modules/web3-provider-engine/util/random-id.js","../node_modules/web3-provider-engine/util/create-payload.js","../node_modules/web3-provider-engine/index.js","../node_modules/web3-provider-engine/subproviders/subprovider.js","../node_modules/web3-provider-engine/node_modules/eth-json-rpc-errors/src/classes.js","../node_modules/web3-provider-engine/node_modules/eth-json-rpc-errors/src/errorValues.json","../node_modules/web3-provider-engine/node_modules/eth-json-rpc-errors/src/errorCodes.json","../node_modules/web3-provider-engine/node_modules/eth-json-rpc-errors/src/utils.js","../node_modules/web3-provider-engine/node_modules/eth-json-rpc-errors/src/errors.js","../node_modules/web3-provider-engine/node_modules/eth-json-rpc-errors/index.js","../node_modules/web3-provider-engine/subproviders/rpc.js","../node_modules/web3-provider-engine/util/estimate-gas.js","../node_modules/web3-provider-engine/subproviders/hooked-wallet.js","../node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js","../node_modules/web3-provider-engine/subproviders/subscriptions.js","../node_modules/web3-provider-engine/subproviders/filters.js","../node_modules/bnc-onboard/dist/esm/providerEngine-538cf498.js"],"names":["xhr","require","inherits","createPayload","Subprovider","ethErrors","serializeError","module","exports","RpcSource","opts","self","rpcUrl","prototype","handleRequest","payload","next","end","targetUrl","sanitizedPayload","sanitizePayload","newPayload","uri","method","headers","body","JSON","stringify","rejectUnauthorized","timeout","err","res","statusCode","rpc","methodNotFound","msg","Error","data","parse","console","error","stack","result","id","jsonrpc","params","createProvider","config","getAccounts","signTransaction","processMessage","processPersonalMessage","signMessage","signPersonalMessage","pollingInterval","app","blockPollingInterval","idMgmt","HookedWalletSubprovider","rpcSubProvider","includes","concat","provider","Web3ProviderEngine","addProvider","SubscriptionSubprovider","FilterSubprovider","start","on"],"mappings":"AIAA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AHAA,APAA,AWAA,AbAA,AUAA,AXAA,ADAA,ADAA,MYAMA,GAAG,GAAG,OAAkBC,OAAO,CAAC,KAAD,CAAzB,GAAmCA,OAAO,CAAC,SAAD,CAAtD;ARCA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AVAA,AWAA,AbAA,AUAA,AXAA,ADAA,ADAA;AICA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AHDA,APCA,AWAA,AbAA,AUAA,AXAA,ADAA,ADAA,MYDMC,QAAQ,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgBC,QAAjC;AREA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AVAA,AWAA,AbAA,AUAA,AXAA,ADAA,ADAA;AICA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AHFA,APEA,AWAA,AbAA,AUAA,AXAA,ADAA,ADAA,MYFMC,aAAa,GAAGF,OAAO,CAAC,2BAAD,CAA7B;ARGA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AVAA,AWAA,AbAA,AUAA,AXAA,ADAA,ADAA;AICA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AHHA,APGA,AWAA,AbAA,AUAA,AXAA,ADAA,ADAA,MYHMG,WAAW,GAAGH,OAAO,CAAC,kBAAD,CAA3B;AMHA,AdOA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AVAA,AWAA,AbAA,AUAA,AZAA,ADAA;AICA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AHJA,APIA,AWAA,AbAA,AUAA,AZAA,ADAA,MYJM;AMHN,AdQA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AHLQI,APKR,AWAA,AbAA,AUAA,AZAA,ADAA,EYLQA,SAAF;ARMN,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AHNmBC,APMnB,AWAA,AbAA,AUAA,AZAA,ADAA,EYNmBA;AMFnB,AdSA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AHPM,APON,AWAA,AbAA,AUAA,AZAA,ADAA,IYPsCL,OAAO,CAAC,qBAAD,CAA7C;ARQA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AQAA,AHAA,ACAA,AVAA,AWAA,AbAA,AUAA,AZAA,ADAA;AkBTA,AdUA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AKAA,ACAA,AHNAM,APMA,AWAA,AbAA,AUAA,AZAA,ADAA,MYNM,CAACC,OAAP,GAAiBC,SAAjB;AROA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AKAA,ACAA,AHLAP,APKA,AWAA,AbAA,AUAA,AZAA,ADAA,QYLQ,CAACO,SAAD,EAAYL,WAAZ,CAAR;AMLA,AdWA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AKAA,ACAA,AVAA,AWAA,AbAA,AUAA,AZAA,ADAA;AICA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AKAA,ACAA,AHLA,APKA,AWAA,AHAA,AZAA,ADAA,SYLSK,SAAT,CAAmBC,IAAnB,EAAyB;AMNzB,AdYA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AKAA,ACAA,AHLE,APKF,AQAA,AZAA,ADAA,QYLQC,IAAI,GAAG,IAAb;ARMF,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AKAA,ACAA,AHLEA,APKF,AQAA,AZAA,ADAA,EYLEA,IAAI,CAACC,MAAL,GAAcF,IAAI,CAACE,MAAnB;AMPF,AdaA,AOAA,ALAA,AEAA,ADAA,AGAA,ADAA,AKAA,ACAA,AHLC,APKD,AQAA,AZAA,ADAA;AICA,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AVAA,AQAA,AZAA,ADAA;AkBbA,AdcA,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHLAH,APKA,AQAA,AZAA,ADAA,SYLS,CAACI,SAAV,CAAoBC,aAApB,GAAoC,UAASC,OAAT,EAAkBC,IAAlB,EAAwBC,GAAxB,EAA4B;ARMhE,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHLE,APKF,AQAA,AZAA,ADAA,QYLQN,IAAI,GAAG,IAAb;AMTF,AdeA,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHLE,APKF,AQAA,AZAA,ADAA,QYLQO,SAAS,GAAGP,IAAI,CAACC,MAAvB,CAF8D,CAI9D;ARIF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AVAA,AQAA,AZAA,ADAA;AkBfA,AdgBA,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHJE,APIF,AQAA,AZAA,ADAA,QYJQO,gBAAgB,GAAGC,eAAe,CAACL,OAAD,CAAxC;ARKF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHJE,APIF,AQAA,AZAA,ADAA,QYJQM,UAAU,GAAGlB,aAAa,CAACgB,gBAAD,CAAhC;ARKF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHEnB,APGF,AJAA,ADAA,EYHEA,GAAG,CAAC;ARIN,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHIsB,APGJ,AJAA,ADAA,IYHIA,GAAG,EAAEJ,SADH;AMbN,AdkBA,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHIK,APGJ,AJAA,ADAA,IYHIA,KMfKuB,CNeC,EAAE,MAFN,KMbN,CAAwBC,MAAxB,EAAgC;AAC9B,AdkBF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHIvB,APGJ,AJAA,ADAA,IYHIA,EMfEwB,KNeK,EAAE,IMfI,GAAGD,MAAM,CAACC,WAAzB;AAAA,AdmBF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHM,APGN,AJAA,ADAA,MkBlBMC,UNeU,KMfK,GAAGF,MAAM,CAACE,GNclB,YMfX;AAAA,AdoBF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHM,APGN,AJAA,ADAA,MkBlBMrC,MAAM,GAAGmC,MAAM,CAACnC,ANeA,MMjBpB;AAAA,AdqBF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHNa,APMb,AJAA,ADAA,KYTM,CMTAsC,cAAc,GAAGH,MAAM,CAACG,cAH5B;AAAA,AdsBF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHIzB,APGJ,AJAA,IWHIA,EMfE0B,ENeE,EAAEzB,IAAI,CAACC,SAAL,CAAeN,GMfG,GAAG0B,INerB,CAPJ,CMR+B,CAACI,sBAJpC;AAAA,AduBF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHIvB,APGJ,AJAA,IWHIA,EMfEwB,WAAW,GAAGL,ENeE,EAAE,EMfE,CAACK,ENOrB,SMZJ;AAAA,AdwBF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHIvB,APGJ,AJAA,IWHIA,EMfEwB,KNeK,EAAE,YMfY,GAAGN,MAAM,CAACM,mBANjC;AAOA,AdkBF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHbM,APaN,AJAA,GWbK,EAUA,CMfCC,SNeQxB,GAAT,EAAcC,CMfE,ENehB,CMfmB,CNeAN,IAAnB,EAAyB,iBMfU8B,kBAAhB,EAAqBC,oBAA3C;AACA,AdkBF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHI,APGJ,AJAA,MiBlBMC,ENeE3B,GAAJ,CMfQ,CNeC,EMfEkB,KNeK/B,GAAG,CAACX,EMfE,IAAI,IAAIoD,INeI,CAAC5B,GAAD,CAAf,CAAV,CADiB,CAG1B,SMjB0B,CAA4B;AACtDkB,AdkBJ,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AVAA,AJAA,IiBlBIA,WAAW,EAAEA,WADyC;AAEtDC,AdkBJ,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHFI,APEJ,AJAA,IiBlBIA,QNgBQlB,GAAG,CAACC,GMhBG,EAAEiB,KNgBjB,UMlBsD;AAGtDC,AdkBJ,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHFM,APEN,AJAA,IiBlBIA,ONgBO,GAAL,IMhBY,EAAEA,cAHsC;AAItDC,AdkBJ,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHFQ,APER,AJAA,IiBlBIA,WNgBWlC,GAAG,CAACZ,OMhBO,EAAE8C,ANgBA,CAAClB,GAAV,CAAcC,cAAd,EAAD,CMpBwC,ANoBlD;AMfJkB,AdkBJ,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AdAA,IiBlBIA,WAAW,EAAEA,WALyC;AAMtDC,AdkBJ,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHHM,AXGN,IiBlBIA,ONeO,GAAL,SMfiB,EAAEA;AANiC,AdyB1D,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHJgB,AXIhB,GiBzB8B,CAA5B;AAQA,AdkBF,AOAA,ALAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHJQ,AXIR,MiBlBMM,SNcU,KMdI,GAAG,IAAIlD,ANcD,YMdH,CAAc;AACjCG,AdkBJ,AEAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHJU,AXIV,IiBlBIA,MAAM,EAAEA,ENcEuB,GAAG,CMdC,CAACyB,CNcE,OMdT,CAAgB,MAAhB,IAA0BhD,MAA1B,GAAmC,WAAWiD,MAAX,CAAkBjD,MAAlB,MNcrC;AMf2B,AdoBrC,AEAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHJUuB,AXIV,GiBpBuB,CAArB,MNgBQA,GAAG,IAAK,iEAAR;AMbR,AdkBF,AEAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHJU,AXIV,MiBlBM2B,QAAQ,ENcEhC,CMdC,ENcE,EMdEiC,CNcC,IAAI3B,KAAJ,CAAUD,GAAV,CAAZ,YMdO,CAAuB;AACpCmB,AdkBJ,AEAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHJU,AXIV,IiBlBIA,aNcarC,EMdE,CNcC,CMdCqC,ANcAhD,cAAc,CAACwB,GAAD,CAAf,CAAV;AMf8B,AdoBxC,AEAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHJS,AXIT,GiBpBiB,CAAf,KNWa,EAAP;AMRNgC,AdkBF,AEAA,ACAA,AGAA,ADAA,AKAA,ACAA,AdAA,EiBlBEA,QAAQ,CAACE,WAAT,CAAqB,IAAIC,sBAAJ,EAArB;AACAH,AdkBF,AEAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHLM,AXKN,EiBlBEA,QAAQ,CAACE,ANaA,GAAL,QMbJ,CAAqB,IAAIE,gBAAJ,EAArB;AACAT,AdkBF,AEAA,ACAA,AGAA,ADAA,AKAA,ACAA,AHNgB,AXMhB,EiBlBEA,MAAM,IAAIK,QAAQ,CAACE,WAAT,CAAqBP,MAArB,CAAV;AACAK,AdkBF,AEAA,AIAA,ADAA,AKAA,AFNQ,AXMR,EiBlBEA,QAAQ,CAACE,INYK,OMZd,CAAqBL,INYG,UMZxB;AACAG,AdkBF,AEAA,AIAA,ADAA,AKAA,AFNU,AXMV,EiBlBEA,QAAQ,CAACK,KAAT,ANYcrC,GAAG,GAAG,IAAIM,KAAJ,CAAW,mBAAX,CAAZ;AMXR0B,AdkBF,AEAA,AIAA,ADAA,AKAA,AFNU,AXMV,EiBlBEA,QAAQ,CAACM,EAAT,CAAY,GNYGnD,GAAG,CMZlB,ANYmBX,EMZEiC,OAAO,CAACC,INYI,CMZjC,ANYkCV,GAAD,CAAf,CAAV;AMXR,AdkBF,AEAA,AIAA,ADAA,AKAA,AFNS,AXMT,SiBlBSgC,ANSM,EAAP,MMTN;AACD,AdkBD,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AFPM,AXON;AGCA,AEAA,AIAA,ADAA,AKAA,AFPQ,AXOR,YWPY/B,GMXGe,ANWA,CAACd,UAAJ,IAAkB,GAAtB,EAA2B;ARQnC,AEAA,AIAA,ADAA,AKAA,AFPU,AXOV,gBWPgBG,GAAG,GAAG,oBAAoBJ,GAAG,CAACN,IAApC;ARQV,AEAA,AIAA,ADAA,AKAA,AFPU,AXOV,gBWPgBK,GAAG,GAAG,IAAIM,KAAJ,CAAUD,GAAV,CAAZ;ARQV,AEAA,AIAA,ADAA,AKAA,AFPU,AXOV,iBWPiBlB,GAAG,CAACX,cAAc,CAACwB,GAAD,CAAf,CAAV;ARQV,AEAA,AIAA,ADAA,AKAA,AFPS,AXOT;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AF7BI,AX6BJ,KWjC8B,CA2B1B;AROJ,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AFRI,AXQJ,QWRQO,IAAJ;ARSJ,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AFTI,AXSJ,QWTQ;ARUR,AEAA,AIAA,ADAA,AKAA,AFTMA,AXSN,MWTMA,IAAI,GAAGX,IAAI,CAACY,KAAL,CAAWb,IAAX,CAAP;ARUN,AEAA,AIAA,ADAA,AKAA,AFTK,AXSL,KWXI,CAEE,OAAOK,GAAP,EAAY;ARUlB,AEAA,AIAA,ADAA,AKAA,AFTMS,AXSN,MWTMA,OAAO,CAACC,KAAR,CAAcV,GAAG,CAACW,KAAlB;ARUN,AEAA,AIAA,ADAA,AKAA,AFTM,AXSN,aWTaxB,GAAG,CAACX,cAAc,CAACwB,GAAD,CAAf,CAAV;ARUN,AEAA,AIAA,ADAA,AKAA,AFTK,AXSL;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AFVI,AXUJ,QWVQO,IAAI,CAACG,KAAT,EAAgB,OAAOvB,GAAG,CAACoB,IAAI,CAACG,KAAN,CAAV;ARWpB,AEAA,AIAA,ADAA,AKAA,AFTIvB,AXSJ,IWTIA,GAAG,CAAC,IAAD,EAAOoB,IAAI,CAACK,MAAZ,CAAH;ARUJ,AEAA,AIAA,ADAA,AKAA,AFTG,AXSH,GWzDK,CAAH;AR0DF,AEAA,AIAA,ADAA,AKAA,AFTC,AXSD,CWlEA,EA2DA;ARQA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AFTA,AXSA,SWTStB,eAAT,CAA0BL,OAA1B,EAAmC;ARUnC,AEAA,AIAA,ADAA,AKAA,AFTE,AXSF,SWTS;ARUT,AEAA,AIAA,ADAA,AKAA,AFTI4B,AXSJ,IWTIA,EAAE,EAAE5B,OAAO,CAAC4B,EADP;ARWT,AEAA,AIAA,ADAA,AKAA,AFTIC,AXSJ,IWTIA,OAAO,EAAE7B,OAAO,CAAC6B,OAFZ;ARYT,AEAA,AIAA,ADAA,AKAA,AFTIrB,AXSJ,IWTIA,MAAM,EAAER,OAAO,CAACQ,MAHX;ARaT,AEAA,AIAA,ADAA,AKAA,AFTIsB,AXSJ,IWTIA,MAAM,EAAE9B,OAAO,CAAC8B;ARUpB,AEAA,AIAA,ADAA,AKAA,AFdS,AXcT,GWdE;AReF,AEAA,AIAA,ADAA,AKAA,AFTC,AXSD;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AEAA,AIAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,ADAA,AKAA,AbAA;AGCA,AMAA,AIAA,AbAA;AGCA,AMAA,AIAA,AbAA;AGCA,AMAA,AIAA,AbAA;AGCA,AMAA,AIAA,AbAA;AGCA,AMAA,AIAA,AbAA;AGCA,AMAA,AIAA,AbAA;AGCA,AMAA,AIAA,AbAA;AGCA,AMAA,AIAA,AbAA;AGCA,AMAA,AIAA,AbAA;AGCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AMAA,AIAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AVCA,AUAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"providerEngine-538cf498.a7359936.js","sourceRoot":"..\\src","sourcesContent":["const EventEmitter = require('events').EventEmitter\nconst inherits = require('util').inherits\n\nmodule.exports = Stoplight\n\n\ninherits(Stoplight, EventEmitter)\n\nfunction Stoplight(){\n  const self = this\n  EventEmitter.call(self)\n  self.isLocked = true\n}\n\nStoplight.prototype.go = function(){\n  const self = this\n  self.isLocked = false\n  self.emit('unlock')\n}\n\nStoplight.prototype.stop = function(){\n  const self = this\n  self.isLocked = true\n  self.emit('lock')\n}\n\nStoplight.prototype.await = function(fn){\n  const self = this\n  if (self.isLocked) {\n    self.once('unlock', fn)\n  } else {\n    setTimeout(fn)\n  }\n}","const stringify = require('json-stable-stringify')\n\nmodule.exports = {\n  cacheIdentifierForPayload: cacheIdentifierForPayload,\n  canCache: canCache,\n  blockTagForPayload: blockTagForPayload,\n  paramsWithoutBlockTag: paramsWithoutBlockTag,\n  blockTagParamIndex: blockTagParamIndex,\n  cacheTypeForPayload: cacheTypeForPayload,\n}\n\nfunction cacheIdentifierForPayload(payload, opts = {}){\n  if (!canCache(payload)) return null\n  const { includeBlockRef } = opts\n  const params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload)\n  return payload.method + ':' + stringify(params)\n}\n\nfunction canCache(payload){\n  return cacheTypeForPayload(payload) !== 'never'\n}\n\nfunction blockTagForPayload(payload){\n  var index = blockTagParamIndex(payload);\n\n  // Block tag param not passed.\n  if (index >= payload.params.length) {\n    return null;\n  }\n\n  return payload.params[index];\n}\n\nfunction paramsWithoutBlockTag(payload){\n  var index = blockTagParamIndex(payload);\n\n  // Block tag param not passed.\n  if (index >= payload.params.length) {\n    return payload.params;\n  }\n\n  // eth_getBlockByNumber has the block tag first, then the optional includeTx? param\n  if (payload.method === 'eth_getBlockByNumber') {\n    return payload.params.slice(1);\n  }\n\n  return payload.params.slice(0,index);\n}\n\nfunction blockTagParamIndex(payload){\n  switch(payload.method) {\n    // blockTag is third param\n    case 'eth_getStorageAt':\n      return 2\n    // blockTag is second param\n    case 'eth_getBalance':\n    case 'eth_getCode':\n    case 'eth_getTransactionCount':\n    case 'eth_call':\n    case 'eth_estimateGas':\n      return 1\n    // blockTag is first param\n    case 'eth_getBlockByNumber':\n      return 0\n    // there is no blockTag\n    default:\n      return undefined\n  }\n}\n\nfunction cacheTypeForPayload(payload) {\n  switch (payload.method) {\n    // cache permanently\n    case 'web3_clientVersion':\n    case 'web3_sha3':\n    case 'eth_protocolVersion':\n    case 'eth_getBlockTransactionCountByHash':\n    case 'eth_getUncleCountByBlockHash':\n    case 'eth_getCode':\n    case 'eth_getBlockByHash':\n    case 'eth_getTransactionByHash':\n    case 'eth_getTransactionByBlockHashAndIndex':\n    case 'eth_getTransactionReceipt':\n    case 'eth_getUncleByBlockHashAndIndex':\n    case 'eth_getCompilers':\n    case 'eth_compileLLL':\n    case 'eth_compileSolidity':\n    case 'eth_compileSerpent':\n    case 'shh_version':\n      return 'perma'\n\n    // cache until fork\n    case 'eth_getBlockByNumber':\n    case 'eth_getBlockTransactionCountByNumber':\n    case 'eth_getUncleCountByBlockNumber':\n    case 'eth_getTransactionByBlockNumberAndIndex':\n    case 'eth_getUncleByBlockNumberAndIndex':\n      return 'fork'\n\n    // cache for block\n    case 'eth_gasPrice':\n    case 'eth_getBalance':\n    case 'eth_getStorageAt':\n    case 'eth_getTransactionCount':\n    case 'eth_call':\n    case 'eth_estimateGas':\n    case 'eth_getFilterLogs':\n    case 'eth_getLogs':\n    case 'eth_blockNumber':\n      return 'block'\n\n    // never cache\n    case 'net_version':\n    case 'net_peerCount':\n    case 'net_listening':\n    case 'eth_syncing':\n    case 'eth_sign':\n    case 'eth_coinbase':\n    case 'eth_mining':\n    case 'eth_hashrate':\n    case 'eth_accounts':\n    case 'eth_sendTransaction':\n    case 'eth_sendRawTransaction':\n    case 'eth_newFilter':\n    case 'eth_newBlockFilter':\n    case 'eth_newPendingTransactionFilter':\n    case 'eth_uninstallFilter':\n    case 'eth_getFilterChanges':\n    case 'eth_getWork':\n    case 'eth_submitWork':\n    case 'eth_submitHashrate':\n    case 'db_putString':\n    case 'db_getString':\n    case 'db_putHex':\n    case 'db_getHex':\n    case 'shh_post':\n    case 'shh_newIdentity':\n    case 'shh_hasIdentity':\n    case 'shh_newGroup':\n    case 'shh_addToGroup':\n    case 'shh_newFilter':\n    case 'shh_uninstallFilter':\n    case 'shh_getFilterChanges':\n    case 'shh_getMessages':\n      return 'never'\n  }\n}\n","module.exports = createRandomId\n\n\nfunction createRandomId () {\n  // random id\n  return Math.floor(Number.MAX_SAFE_INTEGER * Math.random())\n}","const getRandomId = require('./random-id.js')\nconst extend = require('xtend')\n\nmodule.exports = createPayload\n\n\nfunction createPayload(data){\n  return extend({\n    // defaults\n    id: getRandomId(),\n    jsonrpc: '2.0',\n    params: [],\n    // user-specified\n  }, data)\n}\n","const EventEmitter = require('events').EventEmitter\nconst inherits = require('util').inherits\nconst ethUtil = require('ethereumjs-util')\nconst EthBlockTracker = require('eth-block-tracker')\nconst map = require('async/map')\nconst eachSeries = require('async/eachSeries')\nconst Stoplight = require('./util/stoplight.js')\nconst cacheUtils = require('./util/rpc-cache-utils.js')\nconst createPayload = require('./util/create-payload.js')\nconst noop = function(){}\n\nmodule.exports = Web3ProviderEngine\n\n\ninherits(Web3ProviderEngine, EventEmitter)\n\nfunction Web3ProviderEngine(opts) {\n  const self = this\n  EventEmitter.call(self)\n  self.setMaxListeners(30)\n  // parse options\n  opts = opts || {}\n\n  // block polling\n  const directProvider = { sendAsync: self._handleAsync.bind(self) }\n  const blockTrackerProvider = opts.blockTrackerProvider || directProvider\n  self._blockTracker = opts.blockTracker || new EthBlockTracker({\n    provider: blockTrackerProvider,\n    pollingInterval: opts.pollingInterval || 4000,\n    setSkipCacheFlag: true,\n  })\n\n  // set initialization blocker\n  self._ready = new Stoplight()\n\n  // local state\n  self.currentBlock = null\n  self._providers = []\n}\n\n// public\n\nWeb3ProviderEngine.prototype.start = function(cb = noop){\n  const self = this\n\n  // trigger start\n  self._ready.go()\n\n  // on new block, request block body and emit as events\n  self._blockTracker.on('latest', (blockNumber) => {\n    // get block body\n    self._getBlockByNumberWithRetry(blockNumber, (err, block) => {\n      if (err) {\n        this.emit('error', err)\n        return\n      }\n      if (!block) {\n        console.log(block)\n        this.emit('error', new Error(\"Could not find block\"))\n        return\n      }\n      const bufferBlock = toBufferBlock(block)\n      // set current + emit \"block\" event\n      self._setCurrentBlock(bufferBlock)\n      // emit other events\n      self.emit('rawBlock', block)\n      self.emit('latest', block)\n    })\n  })\n\n  // forward other events\n  self._blockTracker.on('sync', self.emit.bind(self, 'sync'))\n  self._blockTracker.on('error', self.emit.bind(self, 'error'))\n\n  // update state\n  self._running = true\n  // signal that we started\n  self.emit('start')\n}\n\nWeb3ProviderEngine.prototype.stop = function(){\n  const self = this\n  // stop block polling by removing event listeners\n  self._blockTracker.removeAllListeners()\n  // update state\n  self._running = false\n  // signal that we stopped\n  self.emit('stop')\n}\n\nWeb3ProviderEngine.prototype.isRunning = function(){\n  const self = this\n  return self._running\n}\n\nWeb3ProviderEngine.prototype.addProvider = function(source, index){\n  const self = this\n  if (typeof index === 'number') {\n    self._providers.splice(index, 0, source)\n  } else {\n    self._providers.push(source)\n  }\n  source.setEngine(this)\n}\n\nWeb3ProviderEngine.prototype.removeProvider = function(source){\n  const self = this\n  const index = self._providers.indexOf(source)\n  if (index < 0) throw new Error('Provider not found.')\n  self._providers.splice(index, 1)\n}\n\nWeb3ProviderEngine.prototype.send = function(payload){\n  throw new Error('Web3ProviderEngine does not support synchronous requests.')\n}\n\nWeb3ProviderEngine.prototype.sendAsync = function(payload, cb){\n  const self = this\n  self._ready.await(function(){\n\n    if (Array.isArray(payload)) {\n      // handle batch\n      map(payload, self._handleAsync.bind(self), cb)\n    } else {\n      // handle single\n      self._handleAsync(payload, cb)\n    }\n\n  })\n}\n\n// private\n\nWeb3ProviderEngine.prototype._getBlockByNumberWithRetry = function(blockNumber, cb) {\n  const self = this\n\n  let retriesRemaining = 5\n\n  attemptRequest()\n  return\n\n  function attemptRequest () {\n    self._getBlockByNumber(blockNumber, afterRequest)\n  }\n\n  function afterRequest (err, block) {\n    // anomalous error occurred\n    if (err) return cb(err)\n    // block not ready yet\n    if (!block) {\n      if (retriesRemaining > 0) {\n        // wait 1s then try again\n        retriesRemaining--\n        setTimeout(function () {\n          attemptRequest()\n        }, 1000)\n        return\n      } else {\n        // give up, return a null block\n        cb(null, null)\n        return\n      }\n    }\n    // otherwise return result\n    cb(null, block)\n    return\n  }\n}\n\n\nWeb3ProviderEngine.prototype._getBlockByNumber = function(blockNumber, cb) {\n  const req = createPayload({ method: 'eth_getBlockByNumber', params: [blockNumber, false], skipCache: true })\n  this._handleAsync(req, (err, res) => {\n    if (err) return cb(err)\n    return cb(null, res.result)\n  })\n}\n\nWeb3ProviderEngine.prototype._handleAsync = function(payload, finished) {\n  var self = this\n  var currentProvider = -1\n  var result = null\n  var error = null\n\n  var stack = []\n\n  next()\n\n  function next(after) {\n    currentProvider += 1\n    stack.unshift(after)\n\n    // Bubbled down as far as we could go, and the request wasn't\n    // handled. Return an error.\n    if (currentProvider >= self._providers.length) {\n      end(new Error('Request for method \"' + payload.method + '\" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'))\n    } else {\n      try {\n        var provider = self._providers[currentProvider]\n        provider.handleRequest(payload, next, end)\n      } catch (e) {\n        end(e)\n      }\n    }\n  }\n\n  function end(_error, _result) {\n    error = _error\n    result = _result\n\n    eachSeries(stack, function(fn, callback) {\n\n      if (fn) {\n        fn(error, result, callback)\n      } else {\n        callback()\n      }\n    }, function() {\n\n      var resultObj = {\n        id: payload.id,\n        jsonrpc: payload.jsonrpc,\n        result: result\n      }\n\n      if (error != null) {\n        resultObj.error = {\n          message: error.stack || error.message || error,\n          code: -32000\n        }\n        // respond with both error formats\n        finished(error, resultObj)\n      } else {\n        finished(null, resultObj)\n      }\n    })\n  }\n}\n\n//\n// from remote-data\n//\n\nWeb3ProviderEngine.prototype._setCurrentBlock = function(block){\n  const self = this\n  self.currentBlock = block\n  self.emit('block', block)\n}\n\n// util\n\nfunction toBufferBlock (jsonBlock) {\n  return {\n    number:           ethUtil.toBuffer(jsonBlock.number),\n    hash:             ethUtil.toBuffer(jsonBlock.hash),\n    parentHash:       ethUtil.toBuffer(jsonBlock.parentHash),\n    nonce:            ethUtil.toBuffer(jsonBlock.nonce),\n    mixHash:          ethUtil.toBuffer(jsonBlock.mixHash),\n    sha3Uncles:       ethUtil.toBuffer(jsonBlock.sha3Uncles),\n    logsBloom:        ethUtil.toBuffer(jsonBlock.logsBloom),\n    transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),\n    stateRoot:        ethUtil.toBuffer(jsonBlock.stateRoot),\n    receiptsRoot:     ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),\n    miner:            ethUtil.toBuffer(jsonBlock.miner),\n    difficulty:       ethUtil.toBuffer(jsonBlock.difficulty),\n    totalDifficulty:  ethUtil.toBuffer(jsonBlock.totalDifficulty),\n    size:             ethUtil.toBuffer(jsonBlock.size),\n    extraData:        ethUtil.toBuffer(jsonBlock.extraData),\n    gasLimit:         ethUtil.toBuffer(jsonBlock.gasLimit),\n    gasUsed:          ethUtil.toBuffer(jsonBlock.gasUsed),\n    timestamp:        ethUtil.toBuffer(jsonBlock.timestamp),\n    transactions:     jsonBlock.transactions,\n  }\n}\n","const createPayload = require('../util/create-payload.js')\n\nmodule.exports = SubProvider\n\n// this is the base class for a subprovider -- mostly helpers\n\n\nfunction SubProvider() {\n\n}\n\nSubProvider.prototype.setEngine = function(engine) {\n  const self = this\n  if (self.engine) return\n  self.engine = engine\n  engine.on('block', function(block) {\n    self.currentBlock = block\n  })\n\n  engine.on('start', function () {\n    self.start()\n  })\n\n  engine.on('stop', function () {\n    self.stop()\n  })\n}\n\nSubProvider.prototype.handleRequest = function(payload, next, end) {\n  throw new Error('Subproviders should override `handleRequest`.')\n}\n\nSubProvider.prototype.emitPayload = function(payload, cb){\n  const self = this\n  self.engine.sendAsync(createPayload(payload), cb)\n}\n\n// dummies for overriding\n\nSubProvider.prototype.stop = function () {}\n\nSubProvider.prototype.start = function () {}\n","\nconst safeStringify = require('fast-safe-stringify')\n\n/**\n * @class JsonRpcError\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP 1474.\n * Permits any integer error code.\n */\nclass EthereumRpcError extends Error {\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   * \n   * @param {number} code - The integer error code.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor (code, message, data) {\n\n    if (!Number.isInteger(code)) throw new Error(\n      '\"code\" must be an integer.'\n    )\n    if (!message || typeof message !== 'string') throw new Error(\n      '\"message\" must be a nonempty string.'\n    )\n\n    super(message)\n    this.code = code\n    if (data !== undefined) this.data = data\n  }\n\n  /**\n   * Returns a plain object with all public class properties.\n   * \n   * @returns {object} The serialized error. \n   */\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message,\n    }\n    if (this.data !== undefined) serialized.data = this.data\n    if (this.stack) serialized.stack = this.stack\n    return serialized\n  }\n\n  /**\n   * Return a string representation of the serialized error, omitting\n   * any circular references.\n   * \n   * @returns {string} The serialized error as a string.\n   */\n  toString() {\n    return safeStringify(\n      this.serialize(),\n      stringifyReplacer,\n      2\n    )\n  }\n}\n\n/**\n * @class EthereumRpcError\n * Error subclass implementing Ethereum Provider errors per EIP 1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends EthereumRpcError {\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   * \n   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor(code, message, data) {\n\n    if (!isValidEthProviderCode(code)) {\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999'\n      )\n    }\n\n    super(code, message, data)\n  }\n}\n\n// Internal\n\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return\n  }\n  return value\n}\n\n// Exports\n\nmodule.exports =  {\n  EthereumRpcError,\n  EthereumProviderError\n}\n","module.exports = {\n  \"-32700\": {\n    \"standard\": \"JSON RPC 2.0\",\n    \"message\": \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\n  },\n  \"-32600\": {\n    \"standard\": \"JSON RPC 2.0\",\n    \"message\": \"The JSON sent is not a valid Request object.\"\n  },\n  \"-32601\": {\n    \"standard\": \"JSON RPC 2.0\",\n    \"message\": \"The method does not exist / is not available.\"\n  },\n  \"-32602\": {\n    \"standard\": \"JSON RPC 2.0\",\n    \"message\": \"Invalid method parameter(s).\"\n  },\n  \"-32603\": {\n    \"standard\": \"JSON RPC 2.0\",\n    \"message\": \"Internal JSON-RPC error.\"\n  },\n  \"-32000\": {\n    \"standard\": \"EIP 1474\",\n    \"message\": \"Invalid input.\"\n  },\n  \"-32001\": {\n    \"standard\": \"EIP 1474\",\n    \"message\": \"Resource not found.\"\n  },\n  \"-32002\": {\n    \"standard\": \"EIP 1474\",\n    \"message\": \"Resource unavailable.\"\n  },\n  \"-32003\": {\n    \"standard\": \"EIP 1474\",\n    \"message\": \"Transaction rejected.\"\n  },\n  \"-32004\": {\n    \"standard\": \"EIP 1474\",\n    \"message\": \"Method not supported.\"\n  },\n  \"4001\": {\n    \"standard\": \"EIP 1193\",\n    \"message\": \"User rejected the request.\"\n  },\n  \"4100\": {\n    \"standard\": \"EIP 1193\",\n    \"message\": \"The requested account and/or method has not been authorized by the user.\"\n  },\n  \"4200\": {\n    \"standard\": \"EIP 1193\",\n    \"message\": \"The requested method is not supported by this Ethereum provider.\"\n  }\n}\n;","module.exports = {\n  \"rpc\": {\n    \"invalidInput\": -32000,\n    \"resourceNotFound\": -32001,\n    \"resourceUnavailable\": -32002,\n    \"transactionRejected\": -32003,\n    \"methodNotSupported\": -32004,\n    \"parse\": -32700,\n    \"invalidRequest\": -32600,\n    \"methodNotFound\": -32601,\n    \"invalidParams\": -32602,\n    \"internal\": -32603\n  },\n  \"provider\": {\n    \"userRejectedRequest\": 4001,\n    \"unauthorized\": 4100,\n    \"unsupportedMethod\": 4200\n  }\n}\n;","\nconst errorValues = require('./errorValues.json')\nconst FALLBACK_ERROR_CODE = require('./errorCodes.json').rpc.internal\nconst { EthereumRpcError } = require('./classes')\n\nconst JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'\n\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.'\n\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n}\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n * \n * @param {number} code - The integer error code\n * @param {string} fallbackMessage - The fallback message\n * @return {string} The corresponding message or the fallback message\n */\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n\n  if (Number.isInteger(code)) {\n\n    const codeString = code.toString()\n    if (errorValues[codeString]) return errorValues[codeString].message\n\n    if (isJsonRpcServerError(code)) return JSON_RPC_SERVER_ERROR_MESSAGE\n\n    // TODO: allow valid codes and messages to be extended\n    // // EIP 1193 Status Codes\n    // if (code >= 4000 && code <= 4999) return Something?\n  }\n  return fallbackMessage\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n * \n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\nfunction isValidCode(code) {\n\n  if (!Number.isInteger(code)) return false\n\n  const codeString = code.toString()\n  if (errorValues[codeString]) return true\n\n  if (isJsonRpcServerError(code)) return true\n\n  // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n  return false\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n * Adds a 'stack' property if it exists on the given error.\n *\n * @param {any} error - The error to serialize.\n * @param {object} fallbackError - The custom fallback error values if the\n * given error is invalid.\n * @return {object} A standardized error object.\n */\nfunction serializeError (error, fallbackError = FALLBACK_ERROR) {\n\n  if (\n    !fallbackError || \n    !Number.isInteger(fallbackError.code) ||\n    typeof fallbackError.message !== 'string'\n  ) {\n    throw new Error(\n      'fallbackError must contain integer number code and string message.'\n    )\n  }\n\n  if (error instanceof EthereumRpcError) {\n    return error.serialize()\n  }\n\n  const serialized = {}\n\n  if (error && isValidCode(error.code)) {\n\n    serialized.code = error.code\n\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message\n      if (error.hasOwnProperty('data')) serialized.data = error.data\n    } else {\n      serialized.message = getMessageFromCode(serialized.code)\n      serialized.data = { originalError: assignOriginalError(error) }\n    }\n\n  } else {\n    serialized.code = fallbackError.code\n    serialized.message = (\n      error && error.message\n        ? error.message\n        : fallbackError.message\n    )\n    serialized.data = { originalError: assignOriginalError(error) }\n  }\n\n  if (error && error.stack) serialized.stack = error.stack\n  return serialized\n}\n\n// Internal\n\nfunction isJsonRpcServerError (code) {\n  return code >= -32099 && code <= -32000\n}\n\nfunction assignOriginalError (error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error)\n  }\n  return error\n}\n\n// Exports\n\nmodule.exports = {\n  getMessageFromCode,\n  isValidCode,\n  serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE,\n}\n","\nconst { EthereumRpcError, EthereumProviderError } = require('./classes')\nconst { getMessageFromCode } = require('./utils')\nconst ERROR_CODES = require('./errorCodes.json')\n\nmodule.exports = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    parse: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.parse, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidRequest: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidRequest, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidParams: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidParams, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotFound: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.methodNotFound, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    internal: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.internal, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP 1474.\n     * \n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    server: (opts) => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.')\n      }\n      const { code } = opts\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error(\n          '\"code\" must be an integer such that: -32099 <= code <= -32005'\n        )\n      }\n      return getEthJsonRpcError(code, opts)\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidInput: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidInput, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceNotFound: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.resourceNotFound, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceUnavailable: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.resourceUnavailable, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    transactionRejected: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.transactionRejected, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotSupported: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.methodNotSupported, opts\n    ),\n  },\n\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    userRejectedRequest: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.userRejectedRequest, opts\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unauthorized: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.unauthorized, opts\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unsupportedMethod: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.unsupportedMethod, opts\n      )\n    },\n\n    /**\n     * Get a custom Ethereum Provider error.\n     * \n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} opts.message - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    custom: (opts) => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.')\n      }\n      const { code, message, data } = opts\n      if (!message || typeof message !== 'string') throw new Error(\n        '\"message\" must be a nonempty string'\n      )\n      return new EthereumProviderError(code, message, data)\n    },\n  },\n}\n\n// Internal\n\nfunction getEthJsonRpcError(code, opts) {\n  const [ message, data ] = validateOpts(opts)\n  return new EthereumRpcError(\n    code,\n    message || getMessageFromCode(code),\n    data\n  )\n}\n\nfunction getEthProviderError(code, opts) {\n  const [ message, data ] = validateOpts(opts)\n  return new EthereumProviderError(\n    code,\n    message || getMessageFromCode(code),\n    data\n  )\n}\n\nfunction validateOpts (opts) {\n  let message, data\n  if (opts) {\n    if (typeof opts === 'string') {\n      message = opts\n    } else if (typeof opts === 'object' && !Array.isArray(opts)) {\n      message = opts.message\n      data = opts.data\n    }\n  }\n  return [ message, data ]\n}\n","\nconst { EthereumRpcError, EthereumProviderError } = require('./src/classes')\nconst {\n  serializeError, getMessageFromCode,\n} = require('./src/utils')\nconst ethErrors = require('./src/errors')\nconst ERROR_CODES = require('./src/errorCodes.json')\n\nmodule.exports = {\n  ethErrors,\n  EthereumRpcError,\n  EthereumProviderError,\n  serializeError,\n  getMessageFromCode,\n  /** @type ErrorCodes */\n  ERROR_CODES,\n}\n\n// Types\n\n/**\n * @typedef {Object} EthereumProviderErrorCodes\n * @property {number} userRejectedRequest\n * @property {number} unauthorized\n * @property {number} unsupportedMethod\n */\n\n/**\n * @typedef {Object} EthereumRpcErrorCodes\n * @property {number} parse\n * @property {number} invalidRequest\n * @property {number} invalidParams\n * @property {number} methodNotFound\n * @property {number} internal\n * @property {number} invalidInput\n * @property {number} resourceNotFound\n * @property {number} resourceUnavailable\n * @property {number} transactionRejected\n * @property {number} methodNotSupported\n */\n\n/**\n * @typedef ErrorCodes\n * @property {EthereumRpcErrorCodes} rpc\n * @property {EthereumProviderErrorCodes} provider\n */\n","const xhr = process.browser ? require('xhr') : require('request')\nconst inherits = require('util').inherits\nconst createPayload = require('../util/create-payload.js')\nconst Subprovider = require('./subprovider.js')\nconst { ethErrors, serializeError } = require('eth-json-rpc-errors')\n\n\nmodule.exports = RpcSource\n\ninherits(RpcSource, Subprovider)\n\nfunction RpcSource(opts) {\n  const self = this\n  self.rpcUrl = opts.rpcUrl\n}\n\nRpcSource.prototype.handleRequest = function(payload, next, end){\n  const self = this\n  const targetUrl = self.rpcUrl\n\n  // overwrite id to conflict with other concurrent users\n  const sanitizedPayload = sanitizePayload(payload)\n  const newPayload = createPayload(sanitizedPayload)\n\n  xhr({\n    uri: targetUrl,\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newPayload),\n    rejectUnauthorized: false,\n    timeout: 20000,\n  }, function(err, res, body) {\n    if (err) return end(serializeError(err))\n\n    // check for error code\n    switch (res.statusCode) {\n      case 405:\n        return end(ethErrors.rpc.methodNotFound())\n      case 504: // Gateway timeout\n        return (function(){\n          let msg = `Gateway timeout. The request took too long to process. `\n          msg += `This can happen when querying logs over too wide a block range.`\n          const err = new Error(msg)\n          return end(serializeError(err))\n        })()\n      case 429: // Too many requests (rate limiting)\n        return (function(){\n          const err = new Error(`Too Many Requests`)\n          return end(serializeError(err))\n        })()\n      default:\n        if (res.statusCode != 200) {\n          const msg = 'Unknown Error: ' + res.body\n          const err = new Error(msg)\n          return end(serializeError(err))\n        }\n    }\n\n    // parse response\n    let data\n    try {\n      data = JSON.parse(body)\n    } catch (err) {\n      console.error(err.stack)\n      return end(serializeError(err))\n    }\n    if (data.error) return end(data.error)\n\n    end(null, data.result)\n  })\n}\n\n// drops any non-standard params\nfunction sanitizePayload (payload) {\n  return {\n    id: payload.id,\n    jsonrpc: payload.jsonrpc,\n    method: payload.method,\n    params: payload.params,\n  }\n}","const createPayload = require('./create-payload.js')\n\nmodule.exports = estimateGas\n\n/*\n\nThis is a work around for https://github.com/ethereum/go-ethereum/issues/2577\n\n*/\n\n\nfunction estimateGas(provider, txParams, cb) {\n  provider.sendAsync(createPayload({\n    method: 'eth_estimateGas',\n    params: [txParams]\n  }), function(err, res){\n    if (err) {\n      // handle simple value transfer case\n      if (err.message === 'no contract code at given address') {\n        return cb(null, '0xcf08')\n      } else {\n        return cb(err)        \n      }\n    }\n    cb(null, res.result)\n  })\n}","/*\n * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'\n *\n * The two callbacks a user needs to implement are:\n * - getAccounts() -- array of addresses supported\n * - signTransaction(tx) -- sign a raw transaction object\n */\n\nconst waterfall = require('async/waterfall')\nconst parallel = require('async/parallel')\nconst inherits = require('util').inherits\nconst ethUtil = require('ethereumjs-util')\nconst sigUtil = require('eth-sig-util')\nconst extend = require('xtend')\nconst Semaphore = require('semaphore')\nconst Subprovider = require('./subprovider.js')\nconst estimateGas = require('../util/estimate-gas.js')\nconst hexRegex = /^[0-9A-Fa-f]+$/g\n\nmodule.exports = HookedWalletSubprovider\n\n// handles the following RPC methods:\n//   eth_coinbase\n//   eth_accounts\n//   eth_sendTransaction\n//   eth_sign\n//   eth_signTypedData\n//   eth_signTypedData_v3\n//   eth_signTypedData_v4\n//   personal_sign\n//   eth_decryptMessage\n//   encryption_public_key\n//   personal_ecRecover\n//   parity_postTransaction\n//   parity_checkRequest\n//   parity_defaultAccount\n\n//\n// Tx Signature Flow\n//\n// handleRequest: eth_sendTransaction\n//   validateTransaction (basic validity check)\n//     validateSender (checks that sender is in accounts)\n//   processTransaction (sign tx and submit to network)\n//     approveTransaction (UI approval hook)\n//     checkApproval\n//     finalizeAndSubmitTx (tx signing)\n//       nonceLock.take (bottle neck to ensure atomic nonce)\n//         fillInTxExtras (set fallback gasPrice, nonce, etc)\n//         signTransaction (perform the signature)\n//         publishTransaction (publish signed tx to network)\n//\n\n\ninherits(HookedWalletSubprovider, Subprovider)\n\nfunction HookedWalletSubprovider(opts){\n  const self = this\n  // control flow\n  self.nonceLock = Semaphore(1)\n\n  // data lookup\n  if (opts.getAccounts) self.getAccounts = opts.getAccounts\n  // high level override\n  if (opts.processTransaction) self.processTransaction = opts.processTransaction\n  if (opts.processMessage) self.processMessage = opts.processMessage\n  if (opts.processPersonalMessage) self.processPersonalMessage = opts.processPersonalMessage\n  if (opts.processTypedMessage) self.processTypedMessage = opts.processTypedMessage\n  // approval hooks\n  self.approveTransaction = opts.approveTransaction || self.autoApprove\n  self.approveMessage = opts.approveMessage || self.autoApprove\n  self.approvePersonalMessage = opts.approvePersonalMessage || self.autoApprove\n  self.approveDecryptMessage = opts.approveDecryptMessage || self.autoApprove\n  self.approveEncryptionPublicKey = opts.approveEncryptionPublicKey || self.autoApprove\n  self.approveTypedMessage = opts.approveTypedMessage || self.autoApprove\n  // actually perform the signature\n  if (opts.signTransaction) self.signTransaction = opts.signTransaction  || mustProvideInConstructor('signTransaction')\n  if (opts.signMessage) self.signMessage = opts.signMessage  || mustProvideInConstructor('signMessage')\n  if (opts.signPersonalMessage) self.signPersonalMessage = opts.signPersonalMessage  || mustProvideInConstructor('signPersonalMessage')\n  if (opts.decryptMessage) self.decryptMessage = opts.decryptMessage  || mustProvideInConstructor('decryptMessage')\n  if (opts.encryptionPublicKey) self.encryptionPublicKey = opts.encryptionPublicKey  || mustProvideInConstructor('encryptionPublicKey')\n  if (opts.signTypedMessage) self.signTypedMessage = opts.signTypedMessage  || mustProvideInConstructor('signTypedMessage')\n  if (opts.recoverPersonalSignature) self.recoverPersonalSignature = opts.recoverPersonalSignature\n  // publish to network\n  if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction\n  // gas options\n  self.estimateGas = opts.estimateGas || self.estimateGas\n  self.getGasPrice = opts.getGasPrice || self.getGasPrice\n}\n\nHookedWalletSubprovider.prototype.handleRequest = function(payload, next, end){\n  const self = this\n  self._parityRequests = {}\n  self._parityRequestCount = 0\n\n  // switch statement is not block scoped\n  // sp we cant repeat var declarations\n  let txParams, msgParams, extraParams\n  let message, address\n\n  switch(payload.method) {\n\n    case 'eth_coinbase':\n      // process normally\n      self.getAccounts(function(err, accounts){\n        if (err) return end(err)\n        let result = accounts[0] || null\n        end(null, result)\n      })\n      return\n\n    case 'eth_accounts':\n      // process normally\n      self.getAccounts(function(err, accounts){\n        if (err) return end(err)\n        end(null, accounts)\n      })\n      return\n\n    case 'eth_sendTransaction':\n      txParams = payload.params[0]\n      waterfall([\n        (cb) => self.validateTransaction(txParams, cb),\n        (cb) => self.processTransaction(txParams, cb),\n      ], end)\n      return\n\n    case 'eth_signTransaction':\n      txParams = payload.params[0]\n      waterfall([\n        (cb) => self.validateTransaction(txParams, cb),\n        (cb) => self.processSignTransaction(txParams, cb),\n      ], end)\n      return\n\n    case 'eth_sign':\n      // process normally\n      address = payload.params[0]\n      message = payload.params[1]\n      // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n      // good place for metadata\n      extraParams = payload.params[2] || {}\n      msgParams = extend(extraParams, {\n        from: address,\n        data: message,\n      })\n      waterfall([\n        (cb) => self.validateMessage(msgParams, cb),\n        (cb) => self.processMessage(msgParams, cb),\n      ], end)\n      return\n\n    case 'personal_sign':\n      return (function(){\n        // process normally\n        const first = payload.params[0]\n        const second = payload.params[1]\n\n        // We initially incorrectly ordered these parameters.\n        // To gracefully respect users who adopted this API early,\n        // we are currently gracefully recovering from the wrong param order\n        // when it is clearly identifiable.\n        //\n        // That means when the first param is definitely an address,\n        // and the second param is definitely not, but is hex.\n        if (resemblesData(second) && resemblesAddress(first)) {\n          let warning = `The eth_personalSign method requires params ordered `\n          warning += `[message, address]. This was previously handled incorrectly, `\n          warning += `and has been corrected automatically. `\n          warning += `Please switch this param order for smooth behavior in the future.`\n          console.warn(warning)\n\n          address = payload.params[0]\n          message = payload.params[1]\n        } else {\n          message = payload.params[0]\n          address = payload.params[1]\n        }\n\n        // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n        // good place for metadata\n        extraParams = payload.params[2] || {}\n        msgParams = extend(extraParams, {\n          from: address,\n          data: message,\n        })\n        waterfall([\n          (cb) => self.validatePersonalMessage(msgParams, cb),\n          (cb) => self.processPersonalMessage(msgParams, cb),\n        ], end)\n      })()\n\n    case 'eth_decryptMessage':\n      return (function(){\n        // process normally\n        const first = payload.params[0]\n        const second = payload.params[1]\n\n        // We initially incorrectly ordered these parameters.\n        // To gracefully respect users who adopted this API early,\n        // we are currently gracefully recovering from the wrong param order\n        // when it is clearly identifiable.\n        //\n        // That means when the first param is definitely an address,\n        // and the second param is definitely not, but is hex.\n        if (resemblesData(second) && resemblesAddress(first)) {\n          let warning = `The eth_decryptMessage method requires params ordered `\n          warning += `[message, address]. This was previously handled incorrectly, `\n          warning += `and has been corrected automatically. `\n          warning += `Please switch this param order for smooth behavior in the future.`\n          console.warn(warning)\n\n          address = payload.params[0]\n          message = payload.params[1]\n        } else {\n          message = payload.params[0]\n          address = payload.params[1]\n        }\n\n        // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n        // good place for metadata\n        extraParams = payload.params[2] || {}\n        msgParams = extend(extraParams, {\n          from: address,\n          data: message,\n        })\n        waterfall([\n          (cb) => self.validateDecryptMessage(msgParams, cb),\n          (cb) => self.processDecryptMessage(msgParams, cb),\n        ], end)\n      })()\n      \n    case 'encryption_public_key':\n      return (function(){\n        const address = payload.params[0]\n        \n        waterfall([\n          (cb) => self.validateEncryptionPublicKey(address, cb),\n          (cb) => self.processEncryptionPublicKey(address, cb),\n        ], end)\n      })()\n      \n    case 'personal_ecRecover':\n      return (function(){    \n        message = payload.params[0]\n        let signature = payload.params[1]\n        // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n        // good place for metadata\n        extraParams = payload.params[2] || {}\n        msgParams = extend(extraParams, {\n          sig: signature,\n          data: message,\n        })\n        self.recoverPersonalSignature(msgParams, end)\n      })()\n\n    case 'eth_signTypedData':\n    case 'eth_signTypedData_v3':\n    case 'eth_signTypedData_v4':\n      return (function(){ \n        // process normally\n      \n        const first = payload.params[0]\n        const second = payload.params[1]\n\n        if (resemblesAddress(first)) {\n          address = first\n          message = second\n        } else {\n          message = first\n          address = second\n        }\n\n        extraParams = payload.params[2] || {}\n        msgParams = extend(extraParams, {\n          from: address,\n          data: message,\n        })\n        waterfall([\n          (cb) => self.validateTypedMessage(msgParams, cb),\n          (cb) => self.processTypedMessage(msgParams, cb),\n        ], end)\n      })()\n\n    case 'parity_postTransaction':\n      txParams = payload.params[0]\n      self.parityPostTransaction(txParams, end)\n      return\n\n    case 'parity_postSign':\n      address = payload.params[0]\n      message = payload.params[1]\n      self.parityPostSign(address, message, end)\n      return\n\n    case 'parity_checkRequest':\n      return (function(){\n        const requestId = payload.params[0]\n        self.parityCheckRequest(requestId, end)\n      })()\n\n    case 'parity_defaultAccount':\n      self.getAccounts(function(err, accounts){\n        if (err) return end(err)\n        const account = accounts[0] || null\n        end(null, account)\n      })\n      return\n\n    default:\n      next()\n      return\n\n  }\n}\n\n//\n// data lookup\n//\n\nHookedWalletSubprovider.prototype.getAccounts = function(cb) {\n  cb(null, [])\n}\n\n\n//\n// \"process\" high level flow\n//\n\nHookedWalletSubprovider.prototype.processTransaction = function(txParams, cb) {\n  const self = this\n  waterfall([\n    (cb) => self.approveTransaction(txParams, cb),\n    (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),\n    (cb) => self.finalizeAndSubmitTx(txParams, cb),\n  ], cb)\n}\n\n\nHookedWalletSubprovider.prototype.processSignTransaction = function(txParams, cb) {\n  const self = this\n  waterfall([\n    (cb) => self.approveTransaction(txParams, cb),\n    (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),\n    (cb) => self.finalizeTx(txParams, cb),\n  ], cb)\n}\n\nHookedWalletSubprovider.prototype.processMessage = function(msgParams, cb) {\n  const self = this\n  waterfall([\n    (cb) => self.approveMessage(msgParams, cb),\n    (didApprove, cb) => self.checkApproval('message', didApprove, cb),\n    (cb) => self.signMessage(msgParams, cb),\n  ], cb)\n}\n\nHookedWalletSubprovider.prototype.processPersonalMessage = function(msgParams, cb) {\n  const self = this\n  waterfall([\n    (cb) => self.approvePersonalMessage(msgParams, cb),\n    (didApprove, cb) => self.checkApproval('message', didApprove, cb),\n    (cb) => self.signPersonalMessage(msgParams, cb),\n  ], cb)\n}\n\nHookedWalletSubprovider.prototype.processDecryptMessage = function(msgParams, cb) {\n  const self = this\n  waterfall([\n    (cb) => self.approveDecryptMessage(msgParams, cb),\n    (didApprove, cb) => self.checkApproval('decryptMessage', didApprove, cb),\n    (cb) => self.decryptMessage(msgParams, cb),\n  ], cb)\n}\n\nHookedWalletSubprovider.prototype.processEncryptionPublicKey = function(msgParams, cb) {\n  const self = this\n  waterfall([\n    (cb) => self.approveEncryptionPublicKey(msgParams, cb),\n    (didApprove, cb) => self.checkApproval('encryptionPublicKey', didApprove, cb),\n    (cb) => self.encryptionPublicKey(msgParams, cb),\n  ], cb)\n}\n\nHookedWalletSubprovider.prototype.processTypedMessage = function(msgParams, cb) {\n  const self = this\n  waterfall([\n    (cb) => self.approveTypedMessage(msgParams, cb),\n    (didApprove, cb) => self.checkApproval('message', didApprove, cb),\n    (cb) => self.signTypedMessage(msgParams, cb),\n  ], cb)\n}\n\n//\n// approval\n//\n\nHookedWalletSubprovider.prototype.autoApprove = function(txParams, cb) {\n  cb(null, true)\n}\n\nHookedWalletSubprovider.prototype.checkApproval = function(type, didApprove, cb) {\n  cb( didApprove ? null : new Error('User denied '+type+' signature.') )\n}\n\n//\n// parity\n//\n\nHookedWalletSubprovider.prototype.parityPostTransaction = function(txParams, cb) {\n  const self = this\n\n  // get next id\n  const count = self._parityRequestCount\n  const reqId = `0x${count.toString(16)}`\n  self._parityRequestCount++\n\n  self.emitPayload({\n    method: 'eth_sendTransaction',\n    params: [txParams],\n  }, function(error, res){\n    if (error) {\n      self._parityRequests[reqId] = { error }\n      return\n    }\n    const txHash = res.result\n    self._parityRequests[reqId] = txHash\n  })\n\n  cb(null, reqId)\n}\n\n\nHookedWalletSubprovider.prototype.parityPostSign = function(address, message, cb) {\n  const self = this\n\n  // get next id\n  const count = self._parityRequestCount\n  const reqId = `0x${count.toString(16)}`\n  self._parityRequestCount++\n\n  self.emitPayload({\n    method: 'eth_sign',\n    params: [address, message],\n  }, function(error, res){\n    if (error) {\n      self._parityRequests[reqId] = { error }\n      return\n    }\n    const result = res.result\n    self._parityRequests[reqId] = result\n  })\n\n  cb(null, reqId)\n}\n\nHookedWalletSubprovider.prototype.parityCheckRequest = function(reqId, cb) {\n  const self = this\n  const result = self._parityRequests[reqId] || null\n  // tx not handled yet\n  if (!result) return cb(null, null)\n  // tx was rejected (or other error)\n  if (result.error) return cb(result.error)\n  // tx sent\n  cb(null, result)\n}\n\n//\n// signature and recovery\n//\n\nHookedWalletSubprovider.prototype.recoverPersonalSignature = function(msgParams, cb) {\n  let senderHex\n  try {\n    senderHex = sigUtil.recoverPersonalSignature(msgParams)\n  } catch (err) {\n    return cb(err)\n  }\n  cb(null, senderHex)\n}\n\n//\n// validation\n//\n\nHookedWalletSubprovider.prototype.validateTransaction = function(txParams, cb){\n  const self = this\n  // shortcut: undefined sender is invalid\n  if (txParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign transaction.`))\n  self.validateSender(txParams.from, function(err, senderIsValid){\n    if (err) return cb(err)\n    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign transaction for this address: \"${txParams.from}\"`))\n    cb()\n  })\n}\n\nHookedWalletSubprovider.prototype.validateMessage = function(msgParams, cb){\n  const self = this\n  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign message.`))\n  self.validateSender(msgParams.from, function(err, senderIsValid){\n    if (err) return cb(err)\n    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: \"${msgParams.from}\"`))\n    cb()\n  })\n}\n\nHookedWalletSubprovider.prototype.validatePersonalMessage = function(msgParams, cb){\n  const self = this\n  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign personal message.`))\n  if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to sign personal message.`))\n  if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateMessage - message was not encoded as hex.`))\n  self.validateSender(msgParams.from, function(err, senderIsValid){\n    if (err) return cb(err)\n    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: \"${msgParams.from}\"`))\n    cb()\n  })\n}\n\nHookedWalletSubprovider.prototype.validateDecryptMessage = function(msgParams, cb){\n  const self = this\n  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to decrypt message.`))\n  if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to decrypt message.`))\n  if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex.`))\n  self.validateSender(msgParams.from, function(err, senderIsValid){\n    if (err) return cb(err)\n    if (!senderIsValid) return cb(new Error(`Unknown address - unable to decrypt message for this address: \"${msgParams.from}\"`))\n    cb()\n  })\n}\n\nHookedWalletSubprovider.prototype.validateEncryptionPublicKey = function(address, cb){\n  const self = this\n\n  self.validateSender(address, function(err, senderIsValid){\n    if (err) return cb(err)\n    if (!senderIsValid) return cb(new Error(`Unknown address - unable to obtain encryption public key for this address: \"${address}\"`))\n    cb()\n  })\n}\n\nHookedWalletSubprovider.prototype.validateTypedMessage = function(msgParams, cb){\n  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign typed data.`))\n  if (msgParams.data === undefined) return cb(new Error(`Undefined data - message required to sign typed data.`))\n  this.validateSender(msgParams.from, function(err, senderIsValid){\n    if (err) return cb(err)\n    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: \"${msgParams.from}\"`))\n    cb()\n  })\n}\n\nHookedWalletSubprovider.prototype.validateSender = function(senderAddress, cb){\n  const self = this\n  // shortcut: undefined sender is invalid\n  if (!senderAddress) return cb(null, false)\n  self.getAccounts(function(err, accounts){\n    if (err) return cb(err)\n    const senderIsValid = (accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1)\n    cb(null, senderIsValid)\n  })\n}\n\n//\n// tx helpers\n//\n\nHookedWalletSubprovider.prototype.finalizeAndSubmitTx = function(txParams, cb) {\n  const self = this\n  // can only allow one tx to pass through this flow at a time\n  // so we can atomically consume a nonce\n  self.nonceLock.take(function(){\n    waterfall([\n      self.fillInTxExtras.bind(self, txParams),\n      self.signTransaction.bind(self),\n      self.publishTransaction.bind(self),\n    ], function(err, txHash){\n      self.nonceLock.leave()\n      if (err) return cb(err)\n      cb(null, txHash)\n    })\n  })\n}\n\nHookedWalletSubprovider.prototype.finalizeTx = function(txParams, cb) {\n  const self = this\n  // can only allow one tx to pass through this flow at a time\n  // so we can atomically consume a nonce\n  self.nonceLock.take(function(){\n    waterfall([\n      self.fillInTxExtras.bind(self, txParams),\n      self.signTransaction.bind(self),\n    ], function(err, signedTx){\n      self.nonceLock.leave()\n      if (err) return cb(err)\n      cb(null, {raw: signedTx, tx: txParams})\n    })\n  })\n}\n\nHookedWalletSubprovider.prototype.publishTransaction = function(rawTx, cb) {\n  const self = this\n  self.emitPayload({\n    method: 'eth_sendRawTransaction',\n    params: [rawTx],\n  }, function(err, res){\n    if (err) return cb(err)\n    cb(null, res.result)\n  })\n}\n\nHookedWalletSubprovider.prototype.estimateGas = function(txParams, cb) {\n  const self = this\n  estimateGas(self.engine, txParams, cb)\n}\n\nHookedWalletSubprovider.prototype.getGasPrice = function(cb) {\n  const self = this\n  self.emitPayload({ method: 'eth_gasPrice', params: [] }, function (err, res) {\n    if (err) return cb(err)\n    cb(null, res.result)\n  })\n}\n\nHookedWalletSubprovider.prototype.fillInTxExtras = function(txParams, cb){\n  const self = this\n  const address = txParams.from\n  // console.log('fillInTxExtras - address:', address)\n\n  const tasks = {}\n\n  if (txParams.gasPrice === undefined) {\n    // console.log(\"need to get gasprice\")\n    tasks.gasPrice = self.getGasPrice.bind(self)\n  }\n\n  if (txParams.nonce === undefined) {\n    // console.log(\"need to get nonce\")\n    tasks.nonce = self.emitPayload.bind(self, { method: 'eth_getTransactionCount', params: [address, 'pending'] })\n  }\n\n  if (txParams.gas === undefined) {\n    // console.log(\"need to get gas\")\n    tasks.gas = self.estimateGas.bind(self, cloneTxParams(txParams))\n  }\n\n  parallel(tasks, function(err, taskResults) {\n    if (err) return cb(err)\n\n    const result = {}\n    if (taskResults.gasPrice) result.gasPrice = taskResults.gasPrice\n    if (taskResults.nonce) result.nonce = taskResults.nonce.result\n    if (taskResults.gas) result.gas = taskResults.gas\n\n    cb(null, extend(txParams, result))\n  })\n}\n\n// util\n\n// we use this to clean any custom params from the txParams\nfunction cloneTxParams(txParams){\n  return {\n    from: txParams.from,\n    to: txParams.to,\n    value: txParams.value,\n    data: txParams.data,\n    gas: txParams.gas,\n    gasPrice: txParams.gasPrice,\n    nonce: txParams.nonce,\n  }\n}\n\nfunction toLowerCase(string){\n  return string.toLowerCase()\n}\n\nfunction resemblesAddress (string) {\n  const fixed = ethUtil.addHexPrefix(string)\n  const isValid = ethUtil.isValidAddress(fixed)\n  return isValid\n}\n\n// Returns true if resembles hex data\n// but definitely not a valid address.\nfunction resemblesData (string) {\n  const fixed = ethUtil.addHexPrefix(string)\n  const isValidAddress = ethUtil.isValidAddress(fixed)\n  return !isValidAddress && isValidHex(string)\n}\n\nfunction isValidHex(data) {\n  const isString = typeof data === 'string'\n  if (!isString) return false\n  const isHexPrefixed = data.slice(0,2) === '0x'\n  if (!isHexPrefixed) return false\n  const nonPrefixed = data.slice(2)\n  const isValid = nonPrefixed.match(hexRegex)\n  return isValid\n}\n\nfunction mustProvideInConstructor(methodName) {\n  return function(params, cb) {\n    cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide \"' + methodName + '\" fn in constructor options'))\n  }\n}\n","const Subprovider = require('./subprovider.js')\n\n// wraps a json-rpc-engine middleware in a subprovider interface\n\nclass JsonRpcEngineMiddlewareSubprovider extends Subprovider {\n\n  // take a constructorFn to call once we have a reference to the engine\n  constructor (constructorFn) {\n    super()\n    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified')\n    this._constructorFn = constructorFn\n  }\n\n  // this is called once the subprovider has been added to the provider engine\n  setEngine (engine) {\n    if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice')\n    const blockTracker = engine._blockTracker\n    const middleware = this._constructorFn({ engine, provider: engine, blockTracker })\n    if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware')\n    if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function')\n    this.middleware = middleware\n  }\n\n  handleRequest (req, provEngNext, provEngEnd) {\n    const res = { id: req.id }\n    this.middleware(req, res, middlewareNext, middlewareEnd)\n\n    function middlewareNext (handler) {\n      provEngNext((err, result, cb) => {\n        // update response object with result or error\n        if (err) {\n          delete res.result\n          res.error = { message: err.message || err }\n        } else {\n          res.result = result\n        }\n        // call middleware's next handler (even if error)\n        if (handler) {\n          handler(cb)\n        } else {\n          cb()\n        }\n      })\n    }\n\n    function middlewareEnd (err) {\n      if (err) return provEngEnd(err)\n      provEngEnd(null, res.result)\n    }\n  }\n\n}\n\nmodule.exports = JsonRpcEngineMiddlewareSubprovider\n","const ProviderSubprovider = require('./json-rpc-engine-middleware')\nconst createSubscriptionManager = require('eth-json-rpc-filters/subscriptionManager')\n\nclass SubscriptionsSubprovider extends ProviderSubprovider {\n  constructor() {\n    super(({ blockTracker, provider, engine }) => {\n      const { events, middleware } = createSubscriptionManager({ blockTracker, provider })\n      // forward subscription events on the engine\n      events.on('notification', (data) => engine.emit('data', null, data))\n      // return the subscription install/remove middleware\n      return middleware\n    })\n  }\n}\n\nmodule.exports = SubscriptionsSubprovider\n","const ProviderSubprovider = require('./json-rpc-engine-middleware')\nconst createFilterMiddleware = require('eth-json-rpc-filters')\n\nclass SubscriptionsSubprovider extends ProviderSubprovider {\n  constructor() {\n    super(({ blockTracker, provider, engine }) => {\n      return createFilterMiddleware({ blockTracker, provider })\n    })\n  }\n}\n\nmodule.exports = SubscriptionsSubprovider\n","import 'regenerator-runtime/runtime';\nimport { g as get_store_value, a as app } from './onboard-dd8224fc.js';\nimport 'bignumber.js';\nimport 'bnc-sdk';\nimport 'bowser';\nimport Web3ProviderEngine from 'web3-provider-engine';\nimport RpcSource from 'web3-provider-engine/subproviders/rpc';\nimport HookedWalletSubprovider from 'web3-provider-engine/subproviders/hooked-wallet';\nimport SubscriptionSubprovider from 'web3-provider-engine/subproviders/subscriptions';\nimport FilterSubprovider from 'web3-provider-engine/subproviders/filters';\n\nfunction createProvider(config) {\n  var getAccounts = config.getAccounts,\n      signTransaction = config.signTransaction,\n      rpcUrl = config.rpcUrl,\n      processMessage = config.processMessage,\n      processPersonalMessage = config.processPersonalMessage,\n      signMessage = config.signMessage,\n      signPersonalMessage = config.signPersonalMessage;\n  var pollingInterval = get_store_value(app).blockPollingInterval;\n  var idMgmt = getAccounts && new HookedWalletSubprovider({\n    getAccounts: getAccounts,\n    signTransaction: signTransaction,\n    processMessage: processMessage,\n    processPersonalMessage: processPersonalMessage,\n    signMessage: signMessage,\n    signPersonalMessage: signPersonalMessage\n  });\n  var rpcSubProvider = new RpcSource({\n    rpcUrl: rpcUrl.includes('http') ? rpcUrl : \"https://\".concat(rpcUrl)\n  });\n  var provider = new Web3ProviderEngine({\n    pollingInterval: pollingInterval\n  });\n  provider.addProvider(new SubscriptionSubprovider());\n  provider.addProvider(new FilterSubprovider());\n  idMgmt && provider.addProvider(idMgmt);\n  provider.addProvider(rpcSubProvider);\n  provider.start();\n  provider.on('error', console.error);\n  return provider;\n}\n\nexport default createProvider;"]}