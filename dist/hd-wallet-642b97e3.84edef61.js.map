{"version":3,"sources":["../node_modules/hdkey/node_modules/secp256k1/lib/index.js","../node_modules/hdkey/node_modules/secp256k1/lib/elliptic.js","../node_modules/hdkey/node_modules/secp256k1/elliptic.js","../node_modules/hdkey/lib/hdkey.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js"],"names":["errors","IMPOSSIBLE_CASE","TWEAK_ADD","TWEAK_MUL","CONTEXT_RANDOMIZE_UNKNOW","SECKEY_INVALID","PUBKEY_PARSE","PUBKEY_SERIALIZE","PUBKEY_COMBINE","SIG_PARSE","SIGN","RECOVER","ECDH","assert","cond","msg","Error","isUint8Array","name","value","length","Uint8Array","undefined","Array","isArray","numbers","join","includes","isCompressed","toTypeString","getAssertedOutput","output","len","Object","prototype","toString","call","slice","module","exports","secp256k1","contextRandomize","seed","privateKeyVerify","seckey","privateKeyNegate","privateKeyTweakAdd","tweak","privateKeyTweakMul","publicKeyVerify","pubkey","publicKeyCreate","compressed","publicKeyConvert","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakAdd","publicKeyTweakMul","signatureNormalize","sig","signatureExport","obj","outputlen","signatureImport","ecdsaSign","msg32","options","data","noncefn","signature","recid","ecdsaVerify","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","EC","require","ec","ecparams","curve","BN","n","constructor","loadCompressedPublicKey","first","x","cmp","p","toRed","red","y","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadUncompressedPublicKey","x3","redISub","isZero","loadPublicKey","subarray","savePublicKey","point","encode","i","bn","negate","sub","umod","toArrayLike","set","iadd","isub","tweaked","imul","pair","keyFromPrivate","getPublic","pairs","add","isInfinity","g","mul","r","s","nh","sigR","sigS","lenR","posR","lenS","posS","message","_noncefn","counter","nonce","isValid","d","sign","canonical","k","pers","err","recoveryParam","sigObj","sigr","sigs","verify","recoverPubKey","scalar","sha256","hash","update","digest","getX","toArray","getY","publicToAddress","ethUtil","toChecksumAddress","numberToGet","generateAddresses","account","offset","publicKey","chainCode","path","hdk","HDKey","Buffer","addresses","dkey","deriveChild","address","push","dPath","concat","isValidPath","parts","split","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit"],"mappings":"AEAAsC,ADAA,ADAA,MEAM,ADAAwC,ADAA9E,CEACuC,CDAC,GAAGwC,CDAC,EEAZ,CFAe,EEAEA,CDAC,CAAC,KCAK,CAAC,IDAP,CAAP,CAAoBC,CCAP,CAAP,ADAjB,CCAkCD,OAAO,CAAC,gBAAD,CAAxB,CAAjB;ACAA,AHCE9E,EAAAA,eAAe,EAAE,uCADJ;AGCf,AFCA,ADAEC,EAAAA,ICAI8E,EAAE,GAAG,ADAA,EACP,ECDWF,EAAJ,CAAO,WAAP,CAAX,kDDFe;AGEf,AFCA,ADCE3E,EAAAA,ICDI8E,KDCK,EAAE,CCDC,GAAGD,EAAE,CAACE,KAApB,EAEA,+BDLe;AGGf,AFGA,ADDE9E,EAAAA,wBAAwB,EAAE,uCALb;AGIf,AHEEC,EAAAA,cAAc,EAAE,wBANH;AGKf,AFEA,ADAEC,EAAAA,ICAI6E,EAAE,GAAGF,GDAG,EAAE,GCAG,CAACG,CAAT,CAAWC,WAAtB,eDPe;AGMf,AHEE9E,EAAAA,gBAAgB,EAAE,gCARL;AGOf,AFEA,ADAEC,EAAAA,OCAO8E,ODAO,EAAE,cCAlB,CAAkCC,KAAlC,EAAyCX,IAAzC,EAA+C,aDThC;AIAf,ADQA,AFEE,ADAAnE,EAAAA,ICAI+E,CAAC,GAAG,CDAC,EAAE,CCACL,EAAJ,CAAOP,IAAP,CAAR,CAD6C,CAG7C,oBDZa;AGSf,AHEElE,EAAAA,IAAI,EAAE,sEAXO;AICf,ADSA,AFGE,ADDAC,EAAAA,ICCI6E,CAAC,CAACC,CDDC,ECCH,ADDK,CCCCR,QAAQ,CAACS,CAAf,KAAqB,CAAzB,EAA4B,OAAO,IAAP,GDbf;AGWf,AFGEF,ADDA5E,ECCA4E,ADDA5E,CCCC,GAAG4E,ADDA,CCCC,CAACG,ADDA,KCCF,CAAQV,QAAQ,CAACW,GAAjB,CAAJ,CAL6C,CAO7C;AGdF,ADUA,AHZe,CAAf;AGaA,AFIE,MAAIC,CAAC,GAAGL,CAAC,CAACM,MAAF,GAAWC,OAAX,CAAmBP,CAAnB,EAAsBQ,OAAtB,CAA8Bf,QAAQ,CAACgB,CAAvC,EAA0CC,OAA1C,EAAR;AEHF,AFIE,ADFF,MCEOX,GDFE1E,ECEG,IDFZ,CCEiB,ADFAC,ICEX,ADFN,EAAuBC,GCEI8E,ADF3B,CCE4B,CAACM,ADFD,KCED,EAAzB,EAAoCN,CAAC,GAAGA,CAAC,CAACO,MAAF,EAAJ;AEHtC,AFKE,ADHA,MAAI,CAACtF,ECGEkE,EAAE,ADHT,CCGUqB,CDHC,MCGJ,ADHU,CCGC,GDHGrF,KAAJ,CAAUD,GAAV,CAAN;AGDb,AFIsBuF,ADFrB,ICEqBA,GAAG,EAAE;AEH3B,AFG6Bd,MAAAA,CAAC,EAAEA,CAAL;AEF3B,AFEmCK,ADAnC,MCAmCA,CAAC,EAAEA,ADA7B5E,YAAT,CAAuBC,IAAvB,EAA6BC,KAA7B,EAAoCC,MAApC,EAA4C;AGD5C,AFC2B,ADCzBP,EAAAA,MAAM,CAACM,KAAK,YAAYE,UAAlB,EAA+B,YAAWH,IAAK,sBAA/C,CAAN;AIlBF,ADiBA,AFAoB,GAAX,CGjBLmJ,AHiBF,eGjBiB,GAAGC,OAAO,CAACD,eAA9B;AAAA,ADkBA,AFAC,ADEC,IInBEE,EJmBEnJ,MAAM,KAAKE,IInBI,GAAGgJ,EJmBtB,EAA0B,GInBG,CAACC,iBADhC;AAEA,ADiBA,AHEI,IInBAC,IJmBIjJ,KAAK,CAACC,CInBC,GAAG,CAAlB,EJmBQ,CAAcJ,MAAd,CAAJ,EAA2B;AGD/B,AFAA,ADEM,SCFGmF,GDEG9E,OAAO,GAAGL,MAAM,CAACM,IAAP,CCFtB,ADEkC,CCFE6D,GDEd,CAAhB,CCFN,EAA2CX,IAA3C,EAAiDC,IAAjD,EAAuD;AGhBvD,ADiBA,AFAE,ADEI,MCFAW,CAAC,EGjBEiF,CHiBC,EDEE1J,ECFEoE,CDEC,CCFL,CAAOP,CDEE,GCFT,CAAR,IGjBF,CAA2B8F,GJmBGxJ,IInB9B,AJmBmC,EInBCyJ,MAApC,EAA4C,2BJmB2BlJ,OAAQ,GAAzE;AIlBJ,ADiBF,AFAE,ADEIZ,MInBA+J,AHiBA/E,ADEAhF,CCFC,GAAG,EDEE,CAACO,CCFC+D,CGjBC,CHiBL,CAAON,CGjBC6F,CJmBC,CAAC/I,CCFV,CAAR,CAFqD,CAIrD,CGnBuB,CAACiJ,EJmBb,CAAgBzJ,KAAK,CInBhC,AJmBiCC,MAAtB,CAAD,EAAgCL,GAAhC,CAAN;AInBJ,ADkBF,AHEK,KAJD,CIfE8J,KJmBK,IInBI,GAAGH,OAAO,CAACG,SADxB;AAAA,ADmBF,AFCE,ADCI,MInBAC,AHkBAtF,CAAC,CAACC,EGlBE,CHkBJ,CAAMR,ADCAlE,CInBC2J,EJmBE,GAAI,EInBC,AHkBA,CGlBCI,AHkBApF,CAAf,GGpBJ,EHoByB,CAArB,EDCwBxE,ECDE2E,CAAC,CAACJ,ADCC,GCDH,CAAMR,QAAQ,CAACS,CAAf,KAAqB,CAAnD,EAAsD,OAAO,IAAP,GDCctE,MAAO,EAAvE;AIlBJ,ADiBF,AFEEoE,ADAI3E,ECAJ2E,CAAC,GGnBGuF,AHmBAvF,ADAA3E,CCAC,CAAC8E,CGnBC,GAAG,AJmBA,CCAN,ADAOxE,CCAC8D,EGnBE+F,EJmBE,CAAC5J,GCAG,CAACwE,EDAV,CCAP,CAAJ,GGnBU,AJmBkBxE,EInB5B,IJmBU,EAA0BL,GAA1B,CAAN;AIlBJgK,ADiBF,AFEElF,ADAG,EInBHkF,AHmBAlF,CAAC,EGnBE,CAAC+E,AHmBA/E,CAAC,CAACF,KAAF,CAAQV,CGnBZ,GAAgB,IAAIgG,AHmBA,CAACrF,GAAjB,CAAJ,CARqD,CAUrD,OGrBgB,CAAWgF,SAAX,EAAsB,KAAtB,CAAhB;AACAG,ADiBF,AHEG,EInBDA,GAAG,CAACF,SAAJ,GAAgB,IAAII,cAAJ,CAAWJ,SAAX,EAAsB,KAAtB,CAAhB;AACA,ADiBF,AFGE,ADDD,MInBKK,AHoBA,CAAC3F,KAAK,GGpBG,EHoBE,CGpBC,EAAhB,CHoBK,IAAkBA,KAAK,KAAK,IAA7B,KAAsCM,CAAC,CAACM,KAAF,QAAeZ,KAAK,KAAK,IAAzB,CAA1C,EAA0E,OAAO,IAAP,CAXrB,CAarD;AEJF;AChBE,ADiBF,AFIE,ADFF,OInBO,CHqBCiB,CDFC5E,CCEC,CGrBCoF,CAAC,CHqBCxB,CAAC,CGrBCmF,AHqBA7E,MGrBb,AHqBW,ADFb,CAAuB3E,CInBA6F,CAAC,AHqBAjB,GGrBGyE,AJmB3B,EAA8B,ECEjB,CAAmBhF,CAAnB,CAAX,IGrBoC,GAAGmF,MAAvC,EAA+C3D,CAAC,EAAhD,EAAoD;AAClD,ADiBJ,AFIE,ADFAnG,EAAAA,ICEI,CAACgF,CGrBCsF,AHqBA,ADFA,CCECrF,ADFAjE,GInBG,GAAGkJ,AHqBR,GGrBW,AHqBAtE,CGrBC2E,EJmBE,CAACjK,GCEf,CAAmBqF,CDFL,CCEO,ADFnB,CCEoBR,CGrBd,CAAgBgB,CAAhB,CAAX,AJmB6B,GCEP,CAAW/B,KDF7B,EAAoC,CCEC,CAACgB,CAApB,CAAnB,EAA2CS,MAA3C,EAAL,EAA0D,OAAO,IAAP,UDFpD,CAAN;AIlBE,ADiBJ,AFKE,ADHD,QInBO2E,CHsBCrG,EAAE,CAACqB,GGtBG,GAAGgE,CHsBT,CAAW,aGtBa,CAACc,IAAI,CAACP,SAAN,EAAiB,IAAjB,CAAf,CAAsCzI,QAAtC,CAA+C,KAA/C,CAAd;AACA+I,ADiBJ,AFIsB5E,IGrBlB4E,AHqBkB5E,GAAG,EAAE,IGrBd,CAACgF,IAAV,CAAe;AACbC,ADiBN,AFG6B/F,ADD7B,MInBM+F,AHoBuB/F,CAAC,EAAEA,ADDvB1D,CCCkB,CGpBhB,EAAE,GAAG0J,MAAH,CAAUV,GJmBvB,CInBa,AJmBe/I,EInBC,GAAhB,CJmBqB,CInBAyJ,EJmBIxJ,GAAD,CInBxB,CAA4BgF,CAA5B,CADM,AJoB2B,IAAI3F,UAAJ,CAAeW,GAAf,CAA9C,EAAmEZ,MAAnE,EAA2E;AIlBrEiK,ADiBN,AFEmCxF,ADAjC,MInBIwF,AHmB6BxF,ADA7B,CCA8B,EAAEA,IGnBzB,AJmBA9D,EInBEwI,IJmBT,KAAkB,QInBQ,CAAC,CJmB/B,EAAkCxI,EInBEyJ,IJmBI,EInBT,CAAYH,AJmBAtJ,MAAM,CInBlB,AJmBmBX,CInBpB,KJmBmB,CAAf;AIrBjB,ADoBnB,AFC2B,ADCzBH,EAAAA,GItBE,SJsBU,CAAC,QAAD,EAAWc,MAAX,EAAmBX,MAAnB,CAAZ;AIlBC,ADiBH,AFAoB,ADElB,GCFO,CAAP,KDEOW,MAAP;AGDF,AFAC,ADEA;AIlBC,ADiBF,SCjBSmJ,SAAP;AACD,ADiBD,AFAA,ADEA,SCFSvE,ADEA9E,YAAT,CCFA,ADEuBV,CCFC+B,IDExB,ECFA,ADE8B,ECFE;AEChC,AFAE,ADEA,SAAOjB,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BjB,KAA/B,EAAsCkB,KAAtC,CAA4C,CAA5C,EAA+C,CAAC,CAAhD,CAAP;AIlBF,ADiBA,AFAE,ADED,QCFOkD,CGjBCkG,IHiBI,GAAGvI,IGjBhB,CAAqB4H,CHiBC,CAAC,CAAD,CGjBtB,AHiBE,EGjByB;AACzB,ADiBF,MCjBMY,KAAK,GAAGZ,IAAI,CAACa,KAAL,CAAW,GAAX,CAAZ;ADkBF,AFDE,ADGFrJ,MAAM,CAACC,GCHGgD,IDGV,CCHE,EDGgB/C,SAAD,IAAe;AIlB9B,ADiBF,AFDI,ADGF,MInBIkJ,GHgBG,ADGA,EInBE,CAAC,CAAD,AHgBP,CGhBE,KAAa,GAAjB,EAAsB;AACpB,ADiBJ,AFDI,ADGAjJ,IAAAA,KCHK,EGhBE,EHgBP,GGhBA,IJmBgB,CAAEC,IAAF,EAAQ;AIlBzB,ADiBH,AFDM,ADGA7B,MAAAA,ICHIqC,EDGE,CACJR,GCJQ,CAACtB,ADIL,KAAK,CCJP,GDIF,ECJoB,EAAtB,ADImBsB,ECJO,EDIH,KCJU,IAAP,GDISrB,UAD7B,EAEJ,2CAFI,CAAN;AGDN,AFDM,ADMA,UAAIqB,GCNG4C,CDMC,KAAK,IAAb,EAAmBrE,WCNW,CAACsE,ADMA,CAAC,ICNF,EAAQrC,ADMP,EAASR,ICNI,ADMb,CCNckE,CDMC,EAAf,CAAZ,ICNmB,CAAgB,CAAhB,EAAmB,EAAnB,CAAR,CAA9B;AGfJ,ADiBF,MCjBM8E,KAAK,CAAC,CAAD,CAAL,KAAa,KAAjB,EAAwB;AACtB,ADiBJ,AFFI,ADOE,SCPG,EGfE,EHeP,CDOUlJ,EItBV,OJsBmB,CAACC,gBAAV,CAA2BC,IAA3B,CAAR;AIrBH,ADiBH,AFFI,ADOI,SCPC,IAAL,ADOS,CAAL;AGJR,AFFI,ADOM,SCPD,IAAL,GDOY,IAAI1B,KAAJ,CAAUhB,MAAM,CAACI,wBAAjB,CAAN;AIrBR,ADiBF,AFFM,ADIA,MInBAsL,IHeIxI,CGfC,CAAC,CAAD,CAAL,EHeU,CAAC9B,EGfE,IHeT,CGfJ,IAAsBsK,AHeA,EAAtB,EAA0B,CGfC,CAAC,CAAD,CAAL,GHeW,EGfE,EHeT,EGf9B,EAA6C;AAC3C,ADiBJ,AFFM,ADOD,KAZI,MIVE,EHeEnF,GGfT,sBHekC,CAAChB,KAAD,EAAQrC,MAAM,CAAC0D,QAAP,CAAgB,CAAhB,EAAmB,EAAnB,CAAR,EAAgC1D,MAAM,CAAC0D,QAAP,CAAgB,EAAhB,EAAoB,EAApB,CAAhC,CAAhC;AGdH,ADiBH;AACA,AFHI,ADQAjE,IAAAA,gBAAgB,CAAEC,MAAF,EAAU;AIrB5B,ADiBF,AFHM,ADQA3B,MItBAyK,AJsBAzK,KItBK,CAAC,CAAD,AHcE,CGdP,GHcA,CDQY,CItBCK,AJsBA,SItBjB,EAA4B,EJsBZ,EAAgBsB,MAAhB,EAAwB,EAAxB,CAAZ;AIrBF,ADiBJ,AFfE,ADqBI,WIvBK,EJuBEJ,EIvBT,OJuBkB,CAACG,gBAAV,CAA2BC,MAA3B,MAAuC,CAA9C;AItBH,ADiBH,AFHC,ADSI,KAlBI;AGaT;AChBE,ADiBF,AFHA,ADSIC,IAAAA,EIvBE+I,GHcG/E,WDSW,CAAEjE,CCTtB,CGduB,AHcCb,GGdE8J,CJuBN,ECTpB,ADS8B,ECTE/E,CGdA,CAAC4E,GHcjC,EGdsC,AHcC,CGdA,CAAD,CAAL,CAAS,CAAT,CAAD,CAA9B;ADkBF,AFHE,ADSIzK,MAAAA,ECTEiC,MAAM,GAAG4D,CDSC,CAAC,GCTG,CAACC,MAAN,CAAa,EDSZ,ECTD,ADSiBnE,ECTEb,IDSlB,ECTwB,ADSA,CCTCX,CDSzB,CAAZ,ICT8B,KAAkB,EAArC,CAAf,CADqC,CAErC;AGdA,ADiBF,AFFE,MGfI0K,KAAK,CAACF,iBAAD,CAAL,IAA4BA,iBAAiB,GAAG,CAAhD,IAAqDF,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,MAAgB,GAAzE,EAA8E;AAC5E,ADiBJ,AHMM,WIvBK,GJuBGlJ,EIvBV,OJuBmB,CAACK,gBAAV,CAA2BD,MAA3B,CAAR;AItBH,ADiBH,AFHE,ADSM,OCTD,IAAIoE,CAAC,CDSC,CAAL,CCTO,CAAb,EAAgBA,CAAC,GAAGjF,MAAM,CAACX,MAA3B,EAAmC,EAAE4F,CAArC,EAAwCjF,MAAM,CAACiF,CAAD,CAAN,GAAY9D,MAAM,CAAC8D,CAAD,CAAlB;AEI1C,AFHC,ADSS,iBAAOpE,MAAP;AItBR,ADiBF,MCjBM8I,KAAK,CAAC,CAAD,CAAL,KAAapK,SAAjB,EAA4B;AAC1B,ADiBJ,AFHAgB,ADQQ,MCRF,CAACC,IGdI,EJsBE,CCRb,ADQQ,CItBJ,EHca;AGbd,ADiBH,AFHEE,ADQQ,ECRRA,cDQc,ECRE,EDQEzB,CCRE,IDQN,CAAUhB,MAAM,CAACC,eAAjB,CAAN;AGJV,AFHI,ADGE,WCHK,CAAP;AGbF,ADiBF,AFHG,ADQE,GCXY,EDlBR,CIOH8L,gBAAgB,GAAGF,MAAM,CAACH,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAD,CAA7B;ADkBF;AChBE,ADiBF,AFHE/I,ADQEG,ECRFH,EDQEG,EItBEgJ,KAAK,CAACC,MHcM,CAAEnJ,GDQE,CAAEA,ECRN,EAAU,CGdjB,CAAL,AJsBgB,EAAUG,EItBCgJ,GJsBX,EAAiB,WItBU,GAAG,CAAlD,EAAqD;AACnD,ADiBJ,AFHI,ADQE9K,MAAAA,ICRIgG,CGdC,CHcC,GAAG,CGdX,EJsBc,CCRC9B,ADQA,ECRJ,CAAOvC,MAAP,CAAX,GDQc,EAAgBA,MAAhB,EAAwB,EAAxB,CAAZ;AIrBH,ADiBH,AFHI,ADQE3B,MAAAA,KCRKgG,EAAE,CAACxB,GAAH,CAAOR,ADQA,CAAC,OCRO,ADQR,CCRSG,CAAhB,ADQiBrC,ICRI,CAArB,ADQO,EAAiB,ECRE,ADQnB,CCRoBkE,ADQhC,ECRkC,CAACP,MAAH,EAA3B,GAAyC,CAAzC,GAA6C,CAApD;AEIJ,AFHG,GARc;AGLf,ADiBF,AHKM,MItBAgF,KAAK,CAAC,CAAD,CAAL,AJsBQlJ,KItBKlB,IJsBI,CAACwB,IItBtB,EAA4B,YJsBhB,CAA6BF,MAA7B,EAAqCG,KAArC,CAAR;AIrBF,ADiBJ,AFHEF,ADQM,ECRNA,SGdS,EJsBE,CAAL,CItBJ,GHcc,CAAED,MAAF,EAAU;AGbzB,ADiBH,AFHI,ADQM,UCRAqE,EAAE,GAAG,EDQErE,ECREuC,EAAJ,CAAOvC,CDQZ,KCRK,CAAX;AEIJ,AFHI,UAAMsE,MAAM,GAAG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","file":"hd-wallet-642b97e3.84edef61.js","sourceRoot":"..\\src","sourcesContent":["const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };"]}